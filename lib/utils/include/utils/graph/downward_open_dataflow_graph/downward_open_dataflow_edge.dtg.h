// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/downward_open_dataflow_graph/downward_open_dataflow_edge.variant.toml
/* proj-data
{
  "generated_from": "0c40ab695b9c1dca5465aea45190a3fa"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_DOWNWARD_OPEN_DATAFLOW_GRAPH_DOWNWARD_OPEN_DATAFLOW_EDGE_DTG_H
#define _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_DOWNWARD_OPEN_DATAFLOW_GRAPH_DOWNWARD_OPEN_DATAFLOW_EDGE_DTG_H

#include "fmt/format.h"
#include "utils/graph/dataflow_graph/dataflow_edge.dtg.h"
#include "utils/graph/downward_open_dataflow_graph/dataflow_output_edge.dtg.h"
#include <cstddef>
#include <functional>
#include <ostream>
#include <type_traits>
#include <variant>

namespace FlexFlow {
struct DownwardOpenDataflowEdge {
  DownwardOpenDataflowEdge() = delete;
  explicit DownwardOpenDataflowEdge(::FlexFlow::DataflowOutputEdge const &);
  explicit DownwardOpenDataflowEdge(::FlexFlow::DataflowEdge const &);
  template <typename T>
  static constexpr bool IsPartOfDownwardOpenDataflowEdge_v =
      std::is_same_v<T, ::FlexFlow::DataflowOutputEdge> ||
      std::is_same_v<T, ::FlexFlow::DataflowEdge>;
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) const {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::DataflowOutputEdge>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::DataflowEdge>());
        return result;
      }
      default: {
        throw std::runtime_error(
            fmt::format("Unknown index {} for type DownwardOpenDataflowEdge",
                        this->index()));
      }
    }
  }
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::DataflowOutputEdge>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::DataflowEdge>());
        return result;
      }
      default: {
        throw std::runtime_error(
            fmt::format("Unknown index {} for type DownwardOpenDataflowEdge",
                        this->index()));
      }
    }
  }
  template <typename T>
  bool has() const {
    static_assert(IsPartOfDownwardOpenDataflowEdge_v<T>,
                  "DownwardOpenDataflowEdge::has() expected one of "
                  "[::FlexFlow::DataflowOutputEdge, ::FlexFlow::DataflowEdge], "
                  "received T");
    return std::holds_alternative<T>(this->raw_variant);
  }
  template <typename T>
  T const &get() const {
    static_assert(IsPartOfDownwardOpenDataflowEdge_v<T>,
                  "DownwardOpenDataflowEdge::get() expected one of "
                  "[::FlexFlow::DataflowOutputEdge, ::FlexFlow::DataflowEdge], "
                  "received T");
    return std::get<T>(this->raw_variant);
  }
  template <typename T>
  T &get() {
    static_assert(IsPartOfDownwardOpenDataflowEdge_v<T>,
                  "DownwardOpenDataflowEdge::get() expected one of "
                  "[::FlexFlow::DataflowOutputEdge, ::FlexFlow::DataflowEdge], "
                  "received T");
    return std::get<T>(this->raw_variant);
  }
  size_t index() const {
    return this->raw_variant.index();
  }
  bool operator==(DownwardOpenDataflowEdge const &) const;
  bool operator!=(DownwardOpenDataflowEdge const &) const;
  bool operator<(DownwardOpenDataflowEdge const &) const;
  bool operator>(DownwardOpenDataflowEdge const &) const;
  bool operator<=(DownwardOpenDataflowEdge const &) const;
  bool operator>=(DownwardOpenDataflowEdge const &) const;
  std::variant<::FlexFlow::DataflowOutputEdge, ::FlexFlow::DataflowEdge>
      raw_variant;
};
} // namespace FlexFlow
namespace std {
template <>
struct hash<::FlexFlow::DownwardOpenDataflowEdge> {
  size_t operator()(::FlexFlow::DownwardOpenDataflowEdge const &) const;
};
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::DownwardOpenDataflowEdge const &);
std::ostream &operator<<(std::ostream &,
                         ::FlexFlow::DownwardOpenDataflowEdge const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_DOWNWARD_OPEN_DATAFLOW_GRAPH_DOWNWARD_OPEN_DATAFLOW_EDGE_DTG_H
