// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/serial_parallel/parallel.struct.toml
/* proj-data
{
  "generated_from": "0aee46f91f8e9ae0f18e1f496aa886b4"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_SERIAL_PARALLEL_PARALLEL_DTG_H
#define _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_SERIAL_PARALLEL_PARALLEL_DTG_H

#include "fmt/format.h"
#include "utils/graph/node/node.dtg.h"
#include "utils/graph/serial_parallel/serial.fwd.h"
#include <functional>
#include <ostream>
#include <tuple>
#include <variant>
#include <vector>

namespace FlexFlow {
struct Parallel {
  Parallel() = delete;
  explicit Parallel(
      std::vector<std::variant<::FlexFlow::Serial, ::FlexFlow::Node>> const
          &children);

  bool operator==(Parallel const &) const;
  bool operator!=(Parallel const &) const;
  bool operator<(Parallel const &) const;
  bool operator>(Parallel const &) const;
  bool operator<=(Parallel const &) const;
  bool operator>=(Parallel const &) const;
  std::vector<std::variant<::FlexFlow::Serial, ::FlexFlow::Node>> children;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::Parallel> {
  size_t operator()(::FlexFlow::Parallel const &) const;
};
} // namespace std

namespace FlexFlow {
std::string format_as(Parallel const &);
std::ostream &operator<<(std::ostream &, Parallel const &);
} // namespace FlexFlow
#include "utils/graph/serial_parallel/serial.dtg.h"

#endif // _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_SERIAL_PARALLEL_PARALLEL_DTG_H
