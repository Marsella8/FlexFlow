// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/serial_parallel/serial.struct.toml
/* proj-data
{
  "generated_from": "c5342b3e8b7dfa96c95fc171f85a0cf7"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_SERIAL_PARALLEL_SERIAL_DTG_H
#define _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_SERIAL_PARALLEL_SERIAL_DTG_H

#include "fmt/format.h"
#include "utils/graph/node/node.dtg.h"
#include "utils/graph/serial_parallel/parallel.fwd.h"
#include <functional>
#include <ostream>
#include <tuple>
#include <variant>
#include <vector>

namespace FlexFlow {
struct Serial {
  Serial() = delete;
  explicit Serial(
      std::vector<std::variant<::FlexFlow::Parallel, ::FlexFlow::Node>> const
          &children);

  bool operator==(Serial const &) const;
  bool operator!=(Serial const &) const;
  bool operator<(Serial const &) const;
  bool operator>(Serial const &) const;
  bool operator<=(Serial const &) const;
  bool operator>=(Serial const &) const;
  std::vector<std::variant<::FlexFlow::Parallel, ::FlexFlow::Node>> children;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::Serial> {
  size_t operator()(::FlexFlow::Serial const &) const;
};
} // namespace std

namespace FlexFlow {
std::string format_as(Serial const &);
std::ostream &operator<<(std::ostream &, Serial const &);
} // namespace FlexFlow
#include "utils/graph/serial_parallel/parallel.dtg.h"

#endif // _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_SERIAL_PARALLEL_SERIAL_DTG_H
