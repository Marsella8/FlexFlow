// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/serial_parallel/serial_parallel_decomposition.variant.toml
/* proj-data
{
  "generated_from": "c019d65a059a20f13a419fa343ad0d26"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_SERIAL_PARALLEL_SERIAL_PARALLEL_DECOMPOSITION_DTG_H
#define _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_SERIAL_PARALLEL_SERIAL_PARALLEL_DECOMPOSITION_DTG_H

#include "fmt/format.h"
#include "utils/graph/node/node.dtg.h"
#include "utils/graph/serial_parallel/parallel.dtg.h"
#include "utils/graph/serial_parallel/serial.dtg.h"
#include <cstddef>
#include <functional>
#include <ostream>
#include <type_traits>
#include <variant>

namespace FlexFlow {
struct SerialParallelDecomposition {
  SerialParallelDecomposition() = delete;
  explicit SerialParallelDecomposition(::FlexFlow::Serial const &);
  explicit SerialParallelDecomposition(::FlexFlow::Parallel const &);
  explicit SerialParallelDecomposition(::FlexFlow::Node const &);
  template <typename T>
  static constexpr bool IsPartOfSerialParallelDecomposition_v =
      std::is_same_v<T, ::FlexFlow::Serial> ||
      std::is_same_v<T, ::FlexFlow::Parallel> ||
      std::is_same_v<T, ::FlexFlow::Node>;
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) const {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::Serial>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::Parallel>());
        return result;
      }
      case 2: {
        ReturnType result = v(this->get<::FlexFlow::Node>());
        return result;
      }
      default: {
        throw std::runtime_error(
            fmt::format("Unknown index {} for type SerialParallelDecomposition",
                        this->index()));
      }
    }
  }
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::Serial>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::Parallel>());
        return result;
      }
      case 2: {
        ReturnType result = v(this->get<::FlexFlow::Node>());
        return result;
      }
      default: {
        throw std::runtime_error(
            fmt::format("Unknown index {} for type SerialParallelDecomposition",
                        this->index()));
      }
    }
  }
  template <typename T>
  bool has() const {
    static_assert(IsPartOfSerialParallelDecomposition_v<T>,
                  "SerialParallelDecomposition::has() expected one of "
                  "[::FlexFlow::Serial, ::FlexFlow::Parallel, "
                  "::FlexFlow::Node], received T");
    return std::holds_alternative<T>(this->raw_variant);
  }
  template <typename T>
  T const &get() const {
    static_assert(IsPartOfSerialParallelDecomposition_v<T>,
                  "SerialParallelDecomposition::get() expected one of "
                  "[::FlexFlow::Serial, ::FlexFlow::Parallel, "
                  "::FlexFlow::Node], received T");
    return std::get<T>(this->raw_variant);
  }
  template <typename T>
  T &get() {
    static_assert(IsPartOfSerialParallelDecomposition_v<T>,
                  "SerialParallelDecomposition::get() expected one of "
                  "[::FlexFlow::Serial, ::FlexFlow::Parallel, "
                  "::FlexFlow::Node], received T");
    return std::get<T>(this->raw_variant);
  }
  size_t index() const {
    return this->raw_variant.index();
  }
  bool operator==(SerialParallelDecomposition const &) const;
  bool operator!=(SerialParallelDecomposition const &) const;
  bool operator<(SerialParallelDecomposition const &) const;
  bool operator>(SerialParallelDecomposition const &) const;
  bool operator<=(SerialParallelDecomposition const &) const;
  bool operator>=(SerialParallelDecomposition const &) const;
  std::variant<::FlexFlow::Serial, ::FlexFlow::Parallel, ::FlexFlow::Node>
      raw_variant;
};
} // namespace FlexFlow
namespace std {
template <>
struct hash<::FlexFlow::SerialParallelDecomposition> {
  size_t operator()(::FlexFlow::SerialParallelDecomposition const &) const;
};
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::SerialParallelDecomposition const &);
std::ostream &operator<<(std::ostream &,
                         ::FlexFlow::SerialParallelDecomposition const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_SERIAL_PARALLEL_SERIAL_PARALLEL_DECOMPOSITION_DTG_H
