// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/open_dataflow_graph/open_dataflow_value.variant.toml
/* proj-data
{
  "generated_from": "a212e5a39ee0d8c9ef39bc4892e15416"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_OPEN_DATAFLOW_GRAPH_OPEN_DATAFLOW_VALUE_DTG_H
#define _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_OPEN_DATAFLOW_GRAPH_OPEN_DATAFLOW_VALUE_DTG_H

#include "fmt/format.h"
#include "utils/graph/dataflow_graph/dataflow_output.dtg.h"
#include "utils/graph/open_dataflow_graph/dataflow_graph_input.dtg.h"
#include <cstddef>
#include <functional>
#include <ostream>
#include <type_traits>
#include <variant>

namespace FlexFlow {
struct OpenDataflowValue {
  OpenDataflowValue() = delete;
  explicit OpenDataflowValue(::FlexFlow::DataflowOutput const &);
  explicit OpenDataflowValue(::FlexFlow::DataflowGraphInput const &);
  template <typename T>
  static constexpr bool IsPartOfOpenDataflowValue_v =
      std::is_same_v<T, ::FlexFlow::DataflowOutput> ||
      std::is_same_v<T, ::FlexFlow::DataflowGraphInput>;
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) const {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::DataflowOutput>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::DataflowGraphInput>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type OpenDataflowValue", this->index()));
      }
    }
  }
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::DataflowOutput>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::DataflowGraphInput>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type OpenDataflowValue", this->index()));
      }
    }
  }
  template <typename T>
  bool has() const {
    static_assert(
        IsPartOfOpenDataflowValue_v<T>,
        "OpenDataflowValue::has() expected one of [::FlexFlow::DataflowOutput, "
        "::FlexFlow::DataflowGraphInput], received T");
    return std::holds_alternative<T>(this->raw_variant);
  }
  template <typename T>
  T const &get() const {
    static_assert(
        IsPartOfOpenDataflowValue_v<T>,
        "OpenDataflowValue::get() expected one of [::FlexFlow::DataflowOutput, "
        "::FlexFlow::DataflowGraphInput], received T");
    return std::get<T>(this->raw_variant);
  }
  template <typename T>
  T &get() {
    static_assert(
        IsPartOfOpenDataflowValue_v<T>,
        "OpenDataflowValue::get() expected one of [::FlexFlow::DataflowOutput, "
        "::FlexFlow::DataflowGraphInput], received T");
    return std::get<T>(this->raw_variant);
  }
  size_t index() const {
    return this->raw_variant.index();
  }
  bool operator==(OpenDataflowValue const &) const;
  bool operator!=(OpenDataflowValue const &) const;
  bool operator<(OpenDataflowValue const &) const;
  bool operator>(OpenDataflowValue const &) const;
  bool operator<=(OpenDataflowValue const &) const;
  bool operator>=(OpenDataflowValue const &) const;
  std::variant<::FlexFlow::DataflowOutput, ::FlexFlow::DataflowGraphInput>
      raw_variant;
};
} // namespace FlexFlow
namespace std {
template <>
struct hash<::FlexFlow::OpenDataflowValue> {
  size_t operator()(::FlexFlow::OpenDataflowValue const &) const;
};
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::OpenDataflowValue const &);
std::ostream &operator<<(std::ostream &, ::FlexFlow::OpenDataflowValue const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_OPEN_DATAFLOW_GRAPH_OPEN_DATAFLOW_VALUE_DTG_H
