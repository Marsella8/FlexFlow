// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/open_dataflow_graph/open_dataflow_edge.variant.toml
/* proj-data
{
  "generated_from": "33e3c8ad4602c3e20c29b6c0dfa104ca"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_OPEN_DATAFLOW_GRAPH_OPEN_DATAFLOW_EDGE_DTG_H
#define _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_OPEN_DATAFLOW_GRAPH_OPEN_DATAFLOW_EDGE_DTG_H

#include "fmt/format.h"
#include "utils/graph/dataflow_graph/dataflow_edge.dtg.h"
#include "utils/graph/open_dataflow_graph/dataflow_input_edge.dtg.h"
#include <cstddef>
#include <functional>
#include <ostream>
#include <type_traits>
#include <variant>

namespace FlexFlow {
struct OpenDataflowEdge {
  OpenDataflowEdge() = delete;
  explicit OpenDataflowEdge(::FlexFlow::DataflowInputEdge const &);
  explicit OpenDataflowEdge(::FlexFlow::DataflowEdge const &);
  template <typename T>
  static constexpr bool IsPartOfOpenDataflowEdge_v =
      std::is_same_v<T, ::FlexFlow::DataflowInputEdge> ||
      std::is_same_v<T, ::FlexFlow::DataflowEdge>;
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) const {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::DataflowInputEdge>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::DataflowEdge>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type OpenDataflowEdge", this->index()));
      }
    }
  }
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::DataflowInputEdge>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::DataflowEdge>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type OpenDataflowEdge", this->index()));
      }
    }
  }
  template <typename T>
  bool has() const {
    static_assert(IsPartOfOpenDataflowEdge_v<T>,
                  "OpenDataflowEdge::has() expected one of "
                  "[::FlexFlow::DataflowInputEdge, ::FlexFlow::DataflowEdge], "
                  "received T");
    return std::holds_alternative<T>(this->raw_variant);
  }
  template <typename T>
  T const &get() const {
    static_assert(IsPartOfOpenDataflowEdge_v<T>,
                  "OpenDataflowEdge::get() expected one of "
                  "[::FlexFlow::DataflowInputEdge, ::FlexFlow::DataflowEdge], "
                  "received T");
    return std::get<T>(this->raw_variant);
  }
  template <typename T>
  T &get() {
    static_assert(IsPartOfOpenDataflowEdge_v<T>,
                  "OpenDataflowEdge::get() expected one of "
                  "[::FlexFlow::DataflowInputEdge, ::FlexFlow::DataflowEdge], "
                  "received T");
    return std::get<T>(this->raw_variant);
  }
  size_t index() const {
    return this->raw_variant.index();
  }
  bool operator==(OpenDataflowEdge const &) const;
  bool operator!=(OpenDataflowEdge const &) const;
  bool operator<(OpenDataflowEdge const &) const;
  bool operator>(OpenDataflowEdge const &) const;
  bool operator<=(OpenDataflowEdge const &) const;
  bool operator>=(OpenDataflowEdge const &) const;
  std::variant<::FlexFlow::DataflowInputEdge, ::FlexFlow::DataflowEdge>
      raw_variant;
};
} // namespace FlexFlow
namespace std {
template <>
struct hash<::FlexFlow::OpenDataflowEdge> {
  size_t operator()(::FlexFlow::OpenDataflowEdge const &) const;
};
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::OpenDataflowEdge const &);
std::ostream &operator<<(std::ostream &, ::FlexFlow::OpenDataflowEdge const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_OPEN_DATAFLOW_GRAPH_OPEN_DATAFLOW_EDGE_DTG_H
