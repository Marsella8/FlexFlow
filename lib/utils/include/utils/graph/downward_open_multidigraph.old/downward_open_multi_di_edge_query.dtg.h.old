// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/downward_open_multidigraph/downward_open_multi_di_edge_query.struct.toml
/* proj-data
{
  "generated_from": "396fddca0f20f2459ee9938138d3fc40"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_DOWNWARD_OPEN_MULTIDIGRAPH_DOWNWARD_OPEN_MULTI_DI_EDGE_QUERY_DTG_H
#define _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_DOWNWARD_OPEN_MULTIDIGRAPH_DOWNWARD_OPEN_MULTI_DI_EDGE_QUERY_DTG_H

#include "fmt/format.h"
#include "utils/graph/multidigraph/multi_di_edge_query.dtg.h"
#include "utils/graph/open_multidigraph/output_multi_di_edge_query.dtg.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct DownwardOpenMultiDiEdgeQuery {
  DownwardOpenMultiDiEdgeQuery() = delete;
  explicit DownwardOpenMultiDiEdgeQuery(
      ::FlexFlow::OutputMultiDiEdgeQuery const &output_edge_query,
      ::FlexFlow::MultiDiEdgeQuery const &standard_edge_query);

  bool operator==(DownwardOpenMultiDiEdgeQuery const &) const;
  bool operator!=(DownwardOpenMultiDiEdgeQuery const &) const;
  bool operator<(DownwardOpenMultiDiEdgeQuery const &) const;
  bool operator>(DownwardOpenMultiDiEdgeQuery const &) const;
  bool operator<=(DownwardOpenMultiDiEdgeQuery const &) const;
  bool operator>=(DownwardOpenMultiDiEdgeQuery const &) const;
  ::FlexFlow::OutputMultiDiEdgeQuery output_edge_query;
  ::FlexFlow::MultiDiEdgeQuery standard_edge_query;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::DownwardOpenMultiDiEdgeQuery> {
  size_t operator()(::FlexFlow::DownwardOpenMultiDiEdgeQuery const &) const;
};
} // namespace std

namespace FlexFlow {
std::string format_as(DownwardOpenMultiDiEdgeQuery const &);
std::ostream &operator<<(std::ostream &, DownwardOpenMultiDiEdgeQuery const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_DOWNWARD_OPEN_MULTIDIGRAPH_DOWNWARD_OPEN_MULTI_DI_EDGE_QUERY_DTG_H
