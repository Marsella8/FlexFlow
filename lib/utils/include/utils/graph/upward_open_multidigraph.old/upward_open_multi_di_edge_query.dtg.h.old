// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/upward_open_multidigraph/upward_open_multi_di_edge_query.struct.toml
/* proj-data
{
  "generated_from": "45db44200f5b0ff7d80004f783ce1464"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_UPWARD_OPEN_MULTIDIGRAPH_UPWARD_OPEN_MULTI_DI_EDGE_QUERY_DTG_H
#define _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_UPWARD_OPEN_MULTIDIGRAPH_UPWARD_OPEN_MULTI_DI_EDGE_QUERY_DTG_H

#include "fmt/format.h"
#include "utils/graph/multidigraph/multi_di_edge_query.dtg.h"
#include "utils/graph/open_multidigraph/input_multi_di_edge_query.dtg.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct UpwardOpenMultiDiEdgeQuery {
  UpwardOpenMultiDiEdgeQuery() = delete;
  explicit UpwardOpenMultiDiEdgeQuery(
      ::FlexFlow::InputMultiDiEdgeQuery const &input_edge_query,
      ::FlexFlow::MultiDiEdgeQuery const &standard_edge_query);

  bool operator==(UpwardOpenMultiDiEdgeQuery const &) const;
  bool operator!=(UpwardOpenMultiDiEdgeQuery const &) const;
  bool operator<(UpwardOpenMultiDiEdgeQuery const &) const;
  bool operator>(UpwardOpenMultiDiEdgeQuery const &) const;
  bool operator<=(UpwardOpenMultiDiEdgeQuery const &) const;
  bool operator>=(UpwardOpenMultiDiEdgeQuery const &) const;
  ::FlexFlow::InputMultiDiEdgeQuery input_edge_query;
  ::FlexFlow::MultiDiEdgeQuery standard_edge_query;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::UpwardOpenMultiDiEdgeQuery> {
  size_t operator()(::FlexFlow::UpwardOpenMultiDiEdgeQuery const &) const;
};
} // namespace std

namespace FlexFlow {
std::string format_as(UpwardOpenMultiDiEdgeQuery const &);
std::ostream &operator<<(std::ostream &, UpwardOpenMultiDiEdgeQuery const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_UPWARD_OPEN_MULTIDIGRAPH_UPWARD_OPEN_MULTI_DI_EDGE_QUERY_DTG_H
