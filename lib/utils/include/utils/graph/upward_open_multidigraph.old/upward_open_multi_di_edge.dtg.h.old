// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/upward_open_multidigraph/upward_open_multi_di_edge.variant.toml
/* proj-data
{
  "generated_from": "fbb0c70b77edf2b92ceb84523c67c2ad"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_UPWARD_OPEN_MULTIDIGRAPH_UPWARD_OPEN_MULTI_DI_EDGE_DTG_H
#define _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_UPWARD_OPEN_MULTIDIGRAPH_UPWARD_OPEN_MULTI_DI_EDGE_DTG_H

#include "fmt/format.h"
#include "utils/graph/multidigraph/multi_di_edge.dtg.h"
#include "utils/graph/open_multidigraph/input_multi_di_edge.dtg.h"
#include <cstddef>
#include <functional>
#include <ostream>
#include <type_traits>
#include <variant>

namespace FlexFlow {
struct UpwardOpenMultiDiEdge {
  UpwardOpenMultiDiEdge() = delete;
  explicit UpwardOpenMultiDiEdge(::FlexFlow::InputMultiDiEdge const &);
  explicit UpwardOpenMultiDiEdge(::FlexFlow::MultiDiEdge const &);
  template <typename T>
  static constexpr bool IsPartOfUpwardOpenMultiDiEdge_v =
      std::is_same_v<T, ::FlexFlow::InputMultiDiEdge> ||
      std::is_same_v<T, ::FlexFlow::MultiDiEdge>;
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) const {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::InputMultiDiEdge>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::MultiDiEdge>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type UpwardOpenMultiDiEdge", this->index()));
      }
    }
  }
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::InputMultiDiEdge>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::MultiDiEdge>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type UpwardOpenMultiDiEdge", this->index()));
      }
    }
  }
  template <typename T>
  bool has() const {
    static_assert(
        IsPartOfUpwardOpenMultiDiEdge_v<T>,
        "UpwardOpenMultiDiEdge::has() expected one of "
        "[::FlexFlow::InputMultiDiEdge, ::FlexFlow::MultiDiEdge], received T");
    return std::holds_alternative<T>(this->raw_variant);
  }
  template <typename T>
  T const &get() const {
    static_assert(
        IsPartOfUpwardOpenMultiDiEdge_v<T>,
        "UpwardOpenMultiDiEdge::get() expected one of "
        "[::FlexFlow::InputMultiDiEdge, ::FlexFlow::MultiDiEdge], received T");
    return std::get<T>(this->raw_variant);
  }
  template <typename T>
  T &get() {
    static_assert(
        IsPartOfUpwardOpenMultiDiEdge_v<T>,
        "UpwardOpenMultiDiEdge::get() expected one of "
        "[::FlexFlow::InputMultiDiEdge, ::FlexFlow::MultiDiEdge], received T");
    return std::get<T>(this->raw_variant);
  }
  size_t index() const {
    return this->raw_variant.index();
  }
  bool operator==(UpwardOpenMultiDiEdge const &) const;
  bool operator!=(UpwardOpenMultiDiEdge const &) const;
  bool operator<(UpwardOpenMultiDiEdge const &) const;
  bool operator>(UpwardOpenMultiDiEdge const &) const;
  bool operator<=(UpwardOpenMultiDiEdge const &) const;
  bool operator>=(UpwardOpenMultiDiEdge const &) const;
  std::variant<::FlexFlow::InputMultiDiEdge, ::FlexFlow::MultiDiEdge>
      raw_variant;
};
} // namespace FlexFlow
namespace std {
template <>
struct hash<::FlexFlow::UpwardOpenMultiDiEdge> {
  size_t operator()(::FlexFlow::UpwardOpenMultiDiEdge const &) const;
};
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::UpwardOpenMultiDiEdge const &);
std::ostream &operator<<(std::ostream &,
                         ::FlexFlow::UpwardOpenMultiDiEdge const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_UPWARD_OPEN_MULTIDIGRAPH_UPWARD_OPEN_MULTI_DI_EDGE_DTG_H
