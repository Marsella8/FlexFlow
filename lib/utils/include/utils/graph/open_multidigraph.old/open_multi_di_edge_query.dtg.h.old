// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/open_multidigraph/open_multi_di_edge_query.struct.toml
/* proj-data
{
  "generated_from": "86fc384b53b6b27982dfe6ab8fff2d04"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_OPEN_MULTIDIGRAPH_OPEN_MULTI_DI_EDGE_QUERY_DTG_H
#define _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_OPEN_MULTIDIGRAPH_OPEN_MULTI_DI_EDGE_QUERY_DTG_H

#include "fmt/format.h"
#include "utils/graph/multidigraph/multi_di_edge_query.dtg.h"
#include "utils/graph/open_multidigraph/input_multi_di_edge_query.dtg.h"
#include "utils/graph/open_multidigraph/output_multi_di_edge_query.dtg.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct OpenMultiDiEdgeQuery {
  OpenMultiDiEdgeQuery() = delete;
  explicit OpenMultiDiEdgeQuery(
      ::FlexFlow::InputMultiDiEdgeQuery const &input_edge_query,
      ::FlexFlow::MultiDiEdgeQuery const &standard_edge_query,
      ::FlexFlow::OutputMultiDiEdgeQuery const &output_edge_query);

  bool operator==(OpenMultiDiEdgeQuery const &) const;
  bool operator!=(OpenMultiDiEdgeQuery const &) const;
  bool operator<(OpenMultiDiEdgeQuery const &) const;
  bool operator>(OpenMultiDiEdgeQuery const &) const;
  bool operator<=(OpenMultiDiEdgeQuery const &) const;
  bool operator>=(OpenMultiDiEdgeQuery const &) const;
  ::FlexFlow::InputMultiDiEdgeQuery input_edge_query;
  ::FlexFlow::MultiDiEdgeQuery standard_edge_query;
  ::FlexFlow::OutputMultiDiEdgeQuery output_edge_query;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::OpenMultiDiEdgeQuery> {
  size_t operator()(::FlexFlow::OpenMultiDiEdgeQuery const &) const;
};
} // namespace std

namespace FlexFlow {
std::string format_as(OpenMultiDiEdgeQuery const &);
std::ostream &operator<<(std::ostream &, OpenMultiDiEdgeQuery const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_OPEN_MULTIDIGRAPH_OPEN_MULTI_DI_EDGE_QUERY_DTG_H
