// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/undirected/undirected_edge_query.struct.toml
/* proj-data
{
  "generated_from": "10df85f620b0fb6e70496d6585be6b43"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_UNDIRECTED_UNDIRECTED_EDGE_QUERY_DTG_H
#define _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_UNDIRECTED_UNDIRECTED_EDGE_QUERY_DTG_H

#include "fmt/format.h"
#include "utils/graph/node/node.dtg.h"
#include "utils/graph/query_set.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct UndirectedEdgeQuery {
  UndirectedEdgeQuery() = delete;
  explicit UndirectedEdgeQuery(
      ::FlexFlow::query_set<::FlexFlow::Node> const &nodes);

  bool operator==(UndirectedEdgeQuery const &) const;
  bool operator!=(UndirectedEdgeQuery const &) const;
  bool operator<(UndirectedEdgeQuery const &) const;
  bool operator>(UndirectedEdgeQuery const &) const;
  bool operator<=(UndirectedEdgeQuery const &) const;
  bool operator>=(UndirectedEdgeQuery const &) const;
  ::FlexFlow::query_set<::FlexFlow::Node> nodes;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::UndirectedEdgeQuery> {
  size_t operator()(::FlexFlow::UndirectedEdgeQuery const &) const;
};
} // namespace std

namespace FlexFlow {
std::string format_as(UndirectedEdgeQuery const &);
std::ostream &operator<<(std::ostream &, UndirectedEdgeQuery const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_UTILS_INCLUDE_UTILS_GRAPH_UNDIRECTED_UNDIRECTED_EDGE_QUERY_DTG_H
