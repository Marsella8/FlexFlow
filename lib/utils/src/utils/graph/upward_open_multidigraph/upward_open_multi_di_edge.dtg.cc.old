// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/upward_open_multidigraph/upward_open_multi_di_edge.variant.toml
/* proj-data
{
  "generated_from": "fbb0c70b77edf2b92ceb84523c67c2ad"
}
*/

#include "utils/graph/upward_open_multidigraph/upward_open_multi_di_edge.dtg.h"

#include <sstream>

namespace FlexFlow {
UpwardOpenMultiDiEdge::UpwardOpenMultiDiEdge(
    ::FlexFlow::InputMultiDiEdge const &v)
    : raw_variant(v) {}
UpwardOpenMultiDiEdge::UpwardOpenMultiDiEdge(::FlexFlow::MultiDiEdge const &v)
    : raw_variant(v) {}
bool UpwardOpenMultiDiEdge::operator==(
    UpwardOpenMultiDiEdge const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool UpwardOpenMultiDiEdge::operator!=(
    UpwardOpenMultiDiEdge const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool UpwardOpenMultiDiEdge::operator<(
    UpwardOpenMultiDiEdge const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool UpwardOpenMultiDiEdge::operator>(
    UpwardOpenMultiDiEdge const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool UpwardOpenMultiDiEdge::operator<=(
    UpwardOpenMultiDiEdge const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool UpwardOpenMultiDiEdge::operator>=(
    UpwardOpenMultiDiEdge const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::UpwardOpenMultiDiEdge>::operator()(
    ::FlexFlow::UpwardOpenMultiDiEdge const &x) const {
  return std::hash<
      std::variant<::FlexFlow::InputMultiDiEdge, ::FlexFlow::MultiDiEdge>>{}(
      x.raw_variant);
}
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::UpwardOpenMultiDiEdge const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<UpwardOpenMultiDiEdge input_edge="
          << x.get<::FlexFlow::InputMultiDiEdge>() << ">";
      break;
    }
    case 1: {
      oss << "<UpwardOpenMultiDiEdge standard_edge="
          << x.get<::FlexFlow::MultiDiEdge>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(fmt::format(
          "Unknown index {} for type UpwardOpenMultiDiEdge", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         ::FlexFlow::UpwardOpenMultiDiEdge const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
