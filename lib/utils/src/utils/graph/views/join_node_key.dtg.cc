// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/views/join_node_key.struct.toml
/* proj-data
{
  "generated_from": "d18ad1216e748a6af1a1a132f18a2284"
}
*/

#include "utils/graph/views/join_node_key.dtg.h"

#include "utils/graph/node/node.dtg.h"
#include "utils/graph/views/lr_direction.dtg.h"
#include <sstream>

namespace FlexFlow {
JoinNodeKey::JoinNodeKey(::FlexFlow::Node const &node,
                         ::FlexFlow::LRDirection const &direction)
    : node(node), direction(direction) {}
bool JoinNodeKey::operator==(JoinNodeKey const &other) const {
  return std::tie(this->node, this->direction) ==
         std::tie(other.node, other.direction);
}
bool JoinNodeKey::operator!=(JoinNodeKey const &other) const {
  return std::tie(this->node, this->direction) !=
         std::tie(other.node, other.direction);
}
bool JoinNodeKey::operator<(JoinNodeKey const &other) const {
  return std::tie(this->node, this->direction) <
         std::tie(other.node, other.direction);
}
bool JoinNodeKey::operator>(JoinNodeKey const &other) const {
  return std::tie(this->node, this->direction) >
         std::tie(other.node, other.direction);
}
bool JoinNodeKey::operator<=(JoinNodeKey const &other) const {
  return std::tie(this->node, this->direction) <=
         std::tie(other.node, other.direction);
}
bool JoinNodeKey::operator>=(JoinNodeKey const &other) const {
  return std::tie(this->node, this->direction) >=
         std::tie(other.node, other.direction);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::JoinNodeKey>::operator()(
    ::FlexFlow::JoinNodeKey const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::Node>{}(x.node) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<::FlexFlow::LRDirection>{}(x.direction) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(JoinNodeKey const &x) {
  std::ostringstream oss;
  oss << "<JoinNodeKey";
  oss << " node=" << x.node;
  oss << " direction=" << x.direction;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, JoinNodeKey const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
