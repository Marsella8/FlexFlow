// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/views/lr_direction.enum.toml
/* proj-data
{
  "generated_from": "0fef027ec69f92967f3171795ae9ddd2"
}
*/

#include "utils/graph/views/lr_direction.dtg.h"

#include <sstream>
#include <stdexcept>

namespace std {
size_t hash<FlexFlow::LRDirection>::operator()(FlexFlow::LRDirection x) const {
  return std::hash<int>{}(static_cast<int>(x));
}
} // namespace std
namespace FlexFlow {
std::string format_as(LRDirection x) {
  switch (x) {
    case LRDirection::LEFT:
      return "LEFT";
    case LRDirection::RIGHT:
      return "RIGHT";
    default:
      std::ostringstream oss;
      oss << "Unknown LRDirection value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
std::ostream &operator<<(std::ostream &s, LRDirection x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
namespace FlexFlow {
void to_json(::nlohmann::json &j, LRDirection x) {
  switch (x) {
    case LRDirection::LEFT:
      j = "LEFT";
      break;
    case LRDirection::RIGHT:
      j = "RIGHT";
      break;
    default:
      std::ostringstream oss;
      oss << "Unknown LRDirection value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
void from_json(::nlohmann::json const &j, LRDirection &x) {
  std::string as_str = j.get<std::string>();
  if (as_str == "LEFT") {
    x = LRDirection::LEFT;
  } else if (as_str == "RIGHT") {
    x = LRDirection::RIGHT;
  } else {
    std::ostringstream oss;
    oss << "Unknown LRDirection value " << as_str;
    throw std::runtime_error(oss.str());
  }
}
} // namespace FlexFlow
namespace rc {
Gen<FlexFlow::LRDirection> Arbitrary<FlexFlow::LRDirection>::arbitrary() {
  return gen::element<FlexFlow::LRDirection>(FlexFlow::LRDirection::LEFT,
                                             FlexFlow::LRDirection::RIGHT);
}
} // namespace rc
