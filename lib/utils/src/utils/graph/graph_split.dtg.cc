// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/graph_split.struct.toml
/* proj-data
{
  "generated_from": "bf08a68806136ac698f1206f84cb907f"
}
*/

#include "utils/graph/graph_split.dtg.h"

#include <sstream>

namespace FlexFlow {
GraphSplit::GraphSplit(std::unordered_set<::FlexFlow::Node> const &first,
                       std::unordered_set<::FlexFlow::Node> const &second)
    : first(first), second(second) {}
bool GraphSplit::operator==(GraphSplit const &other) const {
  return std::tie(this->first, this->second) ==
         std::tie(other.first, other.second);
}
bool GraphSplit::operator!=(GraphSplit const &other) const {
  return std::tie(this->first, this->second) !=
         std::tie(other.first, other.second);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::GraphSplit>::operator()(
    ::FlexFlow::GraphSplit const &x) const {
  size_t result = 0;
  result ^= std::hash<std::unordered_set<::FlexFlow::Node>>{}(x.first) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<std::unordered_set<::FlexFlow::Node>>{}(x.second) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(GraphSplit const &x) {
  std::ostringstream oss;
  oss << "<GraphSplit";
  oss << " first=" << x.first;
  oss << " second=" << x.second;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, GraphSplit const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
