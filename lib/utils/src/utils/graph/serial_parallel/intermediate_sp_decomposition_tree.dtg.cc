// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/src/utils/graph/serial_parallel/intermediate_sp_decomposition_tree.struct.toml
/* proj-data
{
  "generated_from": "2a07baf4a649daf2ef8329fcc3bc611d"
}
*/

#include "utils/graph/serial_parallel/intermediate_sp_decomposition_tree.dtg.h"

#include "utils/hash/vector.h"

namespace FlexFlow {
IntermediateSpDecompositionTree::IntermediateSpDecompositionTree(
    ::FlexFlow::SplitType const &type,
    std::vector<std::variant<::FlexFlow::IntermediateSpDecompositionTree,
                             ::FlexFlow::Node>> const &children)
    : type(type), children(children) {}
bool IntermediateSpDecompositionTree::operator==(
    IntermediateSpDecompositionTree const &other) const {
  return std::tie(this->type, this->children) ==
         std::tie(other.type, other.children);
}
bool IntermediateSpDecompositionTree::operator!=(
    IntermediateSpDecompositionTree const &other) const {
  return std::tie(this->type, this->children) !=
         std::tie(other.type, other.children);
}
bool IntermediateSpDecompositionTree::operator<(
    IntermediateSpDecompositionTree const &other) const {
  return std::tie(this->type, this->children) <
         std::tie(other.type, other.children);
}
bool IntermediateSpDecompositionTree::operator>(
    IntermediateSpDecompositionTree const &other) const {
  return std::tie(this->type, this->children) >
         std::tie(other.type, other.children);
}
bool IntermediateSpDecompositionTree::operator<=(
    IntermediateSpDecompositionTree const &other) const {
  return std::tie(this->type, this->children) <=
         std::tie(other.type, other.children);
}
bool IntermediateSpDecompositionTree::operator>=(
    IntermediateSpDecompositionTree const &other) const {
  return std::tie(this->type, this->children) >=
         std::tie(other.type, other.children);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::IntermediateSpDecompositionTree>::operator()(
    ::FlexFlow::IntermediateSpDecompositionTree const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::SplitType>{}(x.type) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^=
      std::hash<
          std::vector<std::variant<::FlexFlow::IntermediateSpDecompositionTree,
                                   ::FlexFlow::Node>>>{}(x.children) +
      0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std
