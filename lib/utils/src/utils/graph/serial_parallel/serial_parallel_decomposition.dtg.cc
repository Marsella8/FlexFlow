// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/serial_parallel/serial_parallel_decomposition.variant.toml
/* proj-data
{
  "generated_from": "c019d65a059a20f13a419fa343ad0d26"
}
*/

#include "utils/graph/serial_parallel/serial_parallel_decomposition.dtg.h"

#include <sstream>

namespace FlexFlow {
SerialParallelDecomposition::SerialParallelDecomposition(
    ::FlexFlow::Serial const &v)
    : raw_variant(v) {}
SerialParallelDecomposition::SerialParallelDecomposition(
    ::FlexFlow::Parallel const &v)
    : raw_variant(v) {}
SerialParallelDecomposition::SerialParallelDecomposition(
    ::FlexFlow::Node const &v)
    : raw_variant(v) {}
bool SerialParallelDecomposition::operator==(
    SerialParallelDecomposition const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool SerialParallelDecomposition::operator!=(
    SerialParallelDecomposition const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool SerialParallelDecomposition::operator<(
    SerialParallelDecomposition const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool SerialParallelDecomposition::operator>(
    SerialParallelDecomposition const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool SerialParallelDecomposition::operator<=(
    SerialParallelDecomposition const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool SerialParallelDecomposition::operator>=(
    SerialParallelDecomposition const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::SerialParallelDecomposition>::operator()(
    ::FlexFlow::SerialParallelDecomposition const &x) const {
  return std::hash<std::variant<::FlexFlow::Serial,
                                ::FlexFlow::Parallel,
                                ::FlexFlow::Node>>{}(x.raw_variant);
}
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::SerialParallelDecomposition const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<SerialParallelDecomposition ::FlexFlow::Serial="
          << x.get<::FlexFlow::Serial>() << ">";
      break;
    }
    case 1: {
      oss << "<SerialParallelDecomposition ::FlexFlow::Parallel="
          << x.get<::FlexFlow::Parallel>() << ">";
      break;
    }
    case 2: {
      oss << "<SerialParallelDecomposition ::FlexFlow::Node="
          << x.get<::FlexFlow::Node>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(fmt::format(
          "Unknown index {} for type SerialParallelDecomposition", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         ::FlexFlow::SerialParallelDecomposition const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
