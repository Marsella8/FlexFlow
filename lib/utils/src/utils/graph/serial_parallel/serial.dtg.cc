// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/serial_parallel/serial.struct.toml
/* proj-data
{
  "generated_from": "c5342b3e8b7dfa96c95fc171f85a0cf7"
}
*/

#include "utils/graph/serial_parallel/serial.dtg.h"

#include "utils/fmt/variant.h"
#include "utils/fmt/vector.h"
#include "utils/hash/vector.h"
#include <sstream>

namespace FlexFlow {
Serial::Serial(
    std::vector<std::variant<::FlexFlow::Parallel, ::FlexFlow::Node>> const
        &children)
    : children(children) {}
bool Serial::operator==(Serial const &other) const {
  return std::tie(this->children) == std::tie(other.children);
}
bool Serial::operator!=(Serial const &other) const {
  return std::tie(this->children) != std::tie(other.children);
}
bool Serial::operator<(Serial const &other) const {
  return std::tie(this->children) < std::tie(other.children);
}
bool Serial::operator>(Serial const &other) const {
  return std::tie(this->children) > std::tie(other.children);
}
bool Serial::operator<=(Serial const &other) const {
  return std::tie(this->children) <= std::tie(other.children);
}
bool Serial::operator>=(Serial const &other) const {
  return std::tie(this->children) >= std::tie(other.children);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::Serial>::operator()(::FlexFlow::Serial const &x) const {
  size_t result = 0;
  result ^=
      std::hash<
          std::vector<std::variant<::FlexFlow::Parallel, ::FlexFlow::Node>>>{}(
          x.children) +
      0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(Serial const &x) {
  std::ostringstream oss;
  oss << "<Serial";
  oss << " children=" << x.children;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, Serial const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
