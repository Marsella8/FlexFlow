// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/src/utils/graph/serial_parallel/intermediate_sp_decomposition_tree.struct.toml
/* proj-data
{
  "generated_from": "2a07baf4a649daf2ef8329fcc3bc611d"
}
*/

#ifndef _FLEXFLOW_LIB_UTILS_SRC_UTILS_GRAPH_SERIAL_PARALLEL_INTERMEDIATE_SP_DECOMPOSITION_TREE_DTG_H
#define _FLEXFLOW_LIB_UTILS_SRC_UTILS_GRAPH_SERIAL_PARALLEL_INTERMEDIATE_SP_DECOMPOSITION_TREE_DTG_H

#include "utils/graph/node/node.dtg.h"
#include "utils/graph/serial_parallel/split_type.dtg.h"
#include <functional>
#include <tuple>
#include <variant>
#include <vector>

namespace FlexFlow {
struct IntermediateSpDecompositionTree {
  IntermediateSpDecompositionTree() = delete;
  explicit IntermediateSpDecompositionTree(
      ::FlexFlow::SplitType const &type,
      std::vector<std::variant<::FlexFlow::IntermediateSpDecompositionTree,
                               ::FlexFlow::Node>> const &children);

  bool operator==(IntermediateSpDecompositionTree const &) const;
  bool operator!=(IntermediateSpDecompositionTree const &) const;
  bool operator<(IntermediateSpDecompositionTree const &) const;
  bool operator>(IntermediateSpDecompositionTree const &) const;
  bool operator<=(IntermediateSpDecompositionTree const &) const;
  bool operator>=(IntermediateSpDecompositionTree const &) const;
  ::FlexFlow::SplitType type;
  std::vector<std::variant<::FlexFlow::IntermediateSpDecompositionTree,
                           ::FlexFlow::Node>>
      children;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::IntermediateSpDecompositionTree> {
  size_t operator()(::FlexFlow::IntermediateSpDecompositionTree const &) const;
};
} // namespace std

#endif // _FLEXFLOW_LIB_UTILS_SRC_UTILS_GRAPH_SERIAL_PARALLEL_INTERMEDIATE_SP_DECOMPOSITION_TREE_DTG_H
