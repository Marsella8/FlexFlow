// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/serial_parallel/split_type.enum.toml
/* proj-data
{
  "generated_from": "61d75c03b0273d05eb9707f75132974e"
}
*/

#include "utils/graph/serial_parallel/split_type.dtg.h"

#include <sstream>
#include <stdexcept>

namespace std {
size_t hash<FlexFlow::SplitType>::operator()(FlexFlow::SplitType x) const {
  return std::hash<int>{}(static_cast<int>(x));
}
} // namespace std
namespace FlexFlow {
std::string format_as(SplitType x) {
  switch (x) {
    case SplitType::SERIAL:
      return "SERIAL";
    case SplitType::PARALLEL:
      return "PARALLEL";
    default:
      std::ostringstream oss;
      oss << "Unknown SplitType value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
std::ostream &operator<<(std::ostream &s, SplitType x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
namespace FlexFlow {
void to_json(::nlohmann::json &j, SplitType x) {
  switch (x) {
    case SplitType::SERIAL:
      j = "SERIAL";
      break;
    case SplitType::PARALLEL:
      j = "PARALLEL";
      break;
    default:
      std::ostringstream oss;
      oss << "Unknown SplitType value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
void from_json(::nlohmann::json const &j, SplitType &x) {
  std::string as_str = j.get<std::string>();
  if (as_str == "SERIAL") {
    x = SplitType::SERIAL;
  } else if (as_str == "PARALLEL") {
    x = SplitType::PARALLEL;
  } else {
    std::ostringstream oss;
    oss << "Unknown SplitType value " << as_str;
    throw std::runtime_error(oss.str());
  }
}
} // namespace FlexFlow
namespace rc {
Gen<FlexFlow::SplitType> Arbitrary<FlexFlow::SplitType>::arbitrary() {
  return gen::element<FlexFlow::SplitType>(FlexFlow::SplitType::SERIAL,
                                           FlexFlow::SplitType::PARALLEL);
}
} // namespace rc
