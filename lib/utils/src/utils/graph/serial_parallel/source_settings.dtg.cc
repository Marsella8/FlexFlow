// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/src/utils/graph/serial_parallel/source_settings.enum.toml
/* proj-data
{
  "generated_from": "56c4dd8f16ee7756372801aa91f619ea"
}
*/

#include "utils/graph/serial_parallel/source_settings.dtg.h"

#include <sstream>
#include <stdexcept>

namespace std {
size_t hash<FlexFlow::SourceSettings>::operator()(
    FlexFlow::SourceSettings x) const {
  return std::hash<int>{}(static_cast<int>(x));
}
} // namespace std
namespace FlexFlow {
std::string format_as(SourceSettings x) {
  switch (x) {
    case SourceSettings::INCLUDE_SOURCE_NODES:
      return "INCLUDE_SOURCE_NODES";
    case SourceSettings::EXCLUDE_SOURCE_NODES:
      return "EXCLUDE_SOURCE_NODES";
    default:
      std::ostringstream oss;
      oss << "Unknown SourceSettings value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
std::ostream &operator<<(std::ostream &s, SourceSettings x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
namespace FlexFlow {
void to_json(::nlohmann::json &j, SourceSettings x) {
  switch (x) {
    case SourceSettings::INCLUDE_SOURCE_NODES:
      j = "INCLUDE_SOURCE_NODES";
      break;
    case SourceSettings::EXCLUDE_SOURCE_NODES:
      j = "EXCLUDE_SOURCE_NODES";
      break;
    default:
      std::ostringstream oss;
      oss << "Unknown SourceSettings value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
void from_json(::nlohmann::json const &j, SourceSettings &x) {
  std::string as_str = j.get<std::string>();
  if (as_str == "INCLUDE_SOURCE_NODES") {
    x = SourceSettings::INCLUDE_SOURCE_NODES;
  } else if (as_str == "EXCLUDE_SOURCE_NODES") {
    x = SourceSettings::EXCLUDE_SOURCE_NODES;
  } else {
    std::ostringstream oss;
    oss << "Unknown SourceSettings value " << as_str;
    throw std::runtime_error(oss.str());
  }
}
} // namespace FlexFlow
namespace rc {
Gen<FlexFlow::SourceSettings> Arbitrary<FlexFlow::SourceSettings>::arbitrary() {
  return gen::element<FlexFlow::SourceSettings>(
      FlexFlow::SourceSettings::INCLUDE_SOURCE_NODES,
      FlexFlow::SourceSettings::EXCLUDE_SOURCE_NODES);
}
} // namespace rc
