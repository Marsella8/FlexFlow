// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/dataflow_graph/node_added_result.struct.toml
/* proj-data
{
  "generated_from": "4536bb54376e2e221e0ff29347e81662"
}
*/

#include "utils/graph/dataflow_graph/node_added_result.dtg.h"

#include "utils/fmt/vector.h"
#include "utils/graph/dataflow_graph/dataflow_output.dtg.h"
#include "utils/graph/multidigraph/multi_di_edge.dtg.h"
#include "utils/graph/node.dtg.h"
#include <sstream>
#include <vector>

namespace FlexFlow {
NodeAddedResult::NodeAddedResult(
    ::FlexFlow::Node const &node,
    std::vector<::FlexFlow::DataflowOutput> const &outputs)
    : node(node), outputs(outputs) {}
bool NodeAddedResult::operator==(NodeAddedResult const &other) const {
  return std::tie(this->node, this->outputs) ==
         std::tie(other.node, other.outputs);
}
bool NodeAddedResult::operator!=(NodeAddedResult const &other) const {
  return std::tie(this->node, this->outputs) !=
         std::tie(other.node, other.outputs);
}
bool NodeAddedResult::operator<(NodeAddedResult const &other) const {
  return std::tie(this->node, this->outputs) <
         std::tie(other.node, other.outputs);
}
bool NodeAddedResult::operator>(NodeAddedResult const &other) const {
  return std::tie(this->node, this->outputs) >
         std::tie(other.node, other.outputs);
}
bool NodeAddedResult::operator<=(NodeAddedResult const &other) const {
  return std::tie(this->node, this->outputs) <=
         std::tie(other.node, other.outputs);
}
bool NodeAddedResult::operator>=(NodeAddedResult const &other) const {
  return std::tie(this->node, this->outputs) >=
         std::tie(other.node, other.outputs);
}
} // namespace FlexFlow

namespace FlexFlow {
std::string format_as(NodeAddedResult const &x) {
  std::ostringstream oss;
  oss << "<NodeAddedResult";
  oss << " node=" << x.node;
  oss << " outputs=" << x.outputs;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, NodeAddedResult const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
