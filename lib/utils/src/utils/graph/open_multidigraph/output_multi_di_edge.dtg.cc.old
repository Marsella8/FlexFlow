// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/open_multidigraph/output_multi_di_edge.struct.toml
/* proj-data
{
  "generated_from": "2ec351b641e8ecfd79fd7df2ec13dbd4"
}
*/

#include "utils/graph/open_multidigraph/output_multi_di_edge.dtg.h"

#include "utils/graph/node/node.dtg.h"
#include <cstddef>
#include <sstream>

namespace FlexFlow {
OutputMultiDiEdge::OutputMultiDiEdge(::FlexFlow::Node const &src,
                                     size_t const &raw_uid)
    : src(src), raw_uid(raw_uid) {}
bool OutputMultiDiEdge::operator==(OutputMultiDiEdge const &other) const {
  return std::tie(this->src, this->raw_uid) ==
         std::tie(other.src, other.raw_uid);
}
bool OutputMultiDiEdge::operator!=(OutputMultiDiEdge const &other) const {
  return std::tie(this->src, this->raw_uid) !=
         std::tie(other.src, other.raw_uid);
}
bool OutputMultiDiEdge::operator<(OutputMultiDiEdge const &other) const {
  return std::tie(this->src, this->raw_uid) <
         std::tie(other.src, other.raw_uid);
}
bool OutputMultiDiEdge::operator>(OutputMultiDiEdge const &other) const {
  return std::tie(this->src, this->raw_uid) >
         std::tie(other.src, other.raw_uid);
}
bool OutputMultiDiEdge::operator<=(OutputMultiDiEdge const &other) const {
  return std::tie(this->src, this->raw_uid) <=
         std::tie(other.src, other.raw_uid);
}
bool OutputMultiDiEdge::operator>=(OutputMultiDiEdge const &other) const {
  return std::tie(this->src, this->raw_uid) >=
         std::tie(other.src, other.raw_uid);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::OutputMultiDiEdge>::operator()(
    ::FlexFlow::OutputMultiDiEdge const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::Node>{}(x.src) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<size_t>{}(x.raw_uid) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(OutputMultiDiEdge const &x) {
  std::ostringstream oss;
  oss << "<OutputMultiDiEdge";
  oss << " src=" << x.src;
  oss << " raw_uid=" << x.raw_uid;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, OutputMultiDiEdge const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
