// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/open_multidigraph/input_multi_di_edge.struct.toml
/* proj-data
{
  "generated_from": "d779a19c1f8f096dc1dfabf95633b115"
}
*/

#include "utils/graph/open_multidigraph/input_multi_di_edge.dtg.h"

#include "utils/graph/node/node.dtg.h"
#include <cstddef>
#include <sstream>

namespace FlexFlow {
InputMultiDiEdge::InputMultiDiEdge(::FlexFlow::Node const &dst,
                                   size_t const &raw_uid)
    : dst(dst), raw_uid(raw_uid) {}
bool InputMultiDiEdge::operator==(InputMultiDiEdge const &other) const {
  return std::tie(this->dst, this->raw_uid) ==
         std::tie(other.dst, other.raw_uid);
}
bool InputMultiDiEdge::operator!=(InputMultiDiEdge const &other) const {
  return std::tie(this->dst, this->raw_uid) !=
         std::tie(other.dst, other.raw_uid);
}
bool InputMultiDiEdge::operator<(InputMultiDiEdge const &other) const {
  return std::tie(this->dst, this->raw_uid) <
         std::tie(other.dst, other.raw_uid);
}
bool InputMultiDiEdge::operator>(InputMultiDiEdge const &other) const {
  return std::tie(this->dst, this->raw_uid) >
         std::tie(other.dst, other.raw_uid);
}
bool InputMultiDiEdge::operator<=(InputMultiDiEdge const &other) const {
  return std::tie(this->dst, this->raw_uid) <=
         std::tie(other.dst, other.raw_uid);
}
bool InputMultiDiEdge::operator>=(InputMultiDiEdge const &other) const {
  return std::tie(this->dst, this->raw_uid) >=
         std::tie(other.dst, other.raw_uid);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::InputMultiDiEdge>::operator()(
    ::FlexFlow::InputMultiDiEdge const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::Node>{}(x.dst) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<size_t>{}(x.raw_uid) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(InputMultiDiEdge const &x) {
  std::ostringstream oss;
  oss << "<InputMultiDiEdge";
  oss << " dst=" << x.dst;
  oss << " raw_uid=" << x.raw_uid;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, InputMultiDiEdge const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
