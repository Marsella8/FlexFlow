// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/open_multidigraph/output_multi_di_edge_query.struct.toml
/* proj-data
{
  "generated_from": "4833874bcc5268ec7a7f8fe92186ba17"
}
*/

#include "utils/graph/open_multidigraph/output_multi_di_edge_query.dtg.h"

#include "utils/graph/node/node.dtg.h"
#include "utils/graph/query_set.h"
#include <sstream>

namespace FlexFlow {
OutputMultiDiEdgeQuery::OutputMultiDiEdgeQuery(
    ::FlexFlow::query_set<::FlexFlow::Node> const &srcs)
    : srcs(srcs) {}
bool OutputMultiDiEdgeQuery::operator==(
    OutputMultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs) == std::tie(other.srcs);
}
bool OutputMultiDiEdgeQuery::operator!=(
    OutputMultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs) != std::tie(other.srcs);
}
bool OutputMultiDiEdgeQuery::operator<(
    OutputMultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs) < std::tie(other.srcs);
}
bool OutputMultiDiEdgeQuery::operator>(
    OutputMultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs) > std::tie(other.srcs);
}
bool OutputMultiDiEdgeQuery::operator<=(
    OutputMultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs) <= std::tie(other.srcs);
}
bool OutputMultiDiEdgeQuery::operator>=(
    OutputMultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs) >= std::tie(other.srcs);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::OutputMultiDiEdgeQuery>::operator()(
    ::FlexFlow::OutputMultiDiEdgeQuery const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::query_set<::FlexFlow::Node>>{}(x.srcs) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(OutputMultiDiEdgeQuery const &x) {
  std::ostringstream oss;
  oss << "<OutputMultiDiEdgeQuery";
  oss << " srcs=" << x.srcs;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, OutputMultiDiEdgeQuery const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
