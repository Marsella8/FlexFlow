// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/open_multidigraph/input_multi_di_edge_query.struct.toml
/* proj-data
{
  "generated_from": "c42e43b28fae9a63d94e54f244dd3ee0"
}
*/

#include "utils/graph/open_multidigraph/input_multi_di_edge_query.dtg.h"

#include "utils/graph/node/node.dtg.h"
#include "utils/graph/query_set.h"
#include <sstream>

namespace FlexFlow {
InputMultiDiEdgeQuery::InputMultiDiEdgeQuery(
    ::FlexFlow::query_set<::FlexFlow::Node> const &dsts)
    : dsts(dsts) {}
bool InputMultiDiEdgeQuery::operator==(
    InputMultiDiEdgeQuery const &other) const {
  return std::tie(this->dsts) == std::tie(other.dsts);
}
bool InputMultiDiEdgeQuery::operator!=(
    InputMultiDiEdgeQuery const &other) const {
  return std::tie(this->dsts) != std::tie(other.dsts);
}
bool InputMultiDiEdgeQuery::operator<(
    InputMultiDiEdgeQuery const &other) const {
  return std::tie(this->dsts) < std::tie(other.dsts);
}
bool InputMultiDiEdgeQuery::operator>(
    InputMultiDiEdgeQuery const &other) const {
  return std::tie(this->dsts) > std::tie(other.dsts);
}
bool InputMultiDiEdgeQuery::operator<=(
    InputMultiDiEdgeQuery const &other) const {
  return std::tie(this->dsts) <= std::tie(other.dsts);
}
bool InputMultiDiEdgeQuery::operator>=(
    InputMultiDiEdgeQuery const &other) const {
  return std::tie(this->dsts) >= std::tie(other.dsts);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::InputMultiDiEdgeQuery>::operator()(
    ::FlexFlow::InputMultiDiEdgeQuery const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::query_set<::FlexFlow::Node>>{}(x.dsts) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(InputMultiDiEdgeQuery const &x) {
  std::ostringstream oss;
  oss << "<InputMultiDiEdgeQuery";
  oss << " dsts=" << x.dsts;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, InputMultiDiEdgeQuery const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
