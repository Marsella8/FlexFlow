// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/open_multidigraph/open_multi_di_edge.variant.toml
/* proj-data
{
  "generated_from": "f7a6881be7d51ba916f3740828c23d91"
}
*/

#include "utils/graph/open_multidigraph/open_multi_di_edge.dtg.h"

#include <sstream>

namespace FlexFlow {
OpenMultiDiEdge::OpenMultiDiEdge(::FlexFlow::InputMultiDiEdge const &v)
    : raw_variant(v) {}
OpenMultiDiEdge::OpenMultiDiEdge(::FlexFlow::OutputMultiDiEdge const &v)
    : raw_variant(v) {}
OpenMultiDiEdge::OpenMultiDiEdge(::FlexFlow::MultiDiEdge const &v)
    : raw_variant(v) {}
bool OpenMultiDiEdge::operator==(OpenMultiDiEdge const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool OpenMultiDiEdge::operator!=(OpenMultiDiEdge const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool OpenMultiDiEdge::operator<(OpenMultiDiEdge const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool OpenMultiDiEdge::operator>(OpenMultiDiEdge const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool OpenMultiDiEdge::operator<=(OpenMultiDiEdge const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool OpenMultiDiEdge::operator>=(OpenMultiDiEdge const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::OpenMultiDiEdge>::operator()(
    ::FlexFlow::OpenMultiDiEdge const &x) const {
  return std::hash<std::variant<::FlexFlow::InputMultiDiEdge,
                                ::FlexFlow::OutputMultiDiEdge,
                                ::FlexFlow::MultiDiEdge>>{}(x.raw_variant);
}
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::OpenMultiDiEdge const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<OpenMultiDiEdge input_edge="
          << x.get<::FlexFlow::InputMultiDiEdge>() << ">";
      break;
    }
    case 1: {
      oss << "<OpenMultiDiEdge output_edge="
          << x.get<::FlexFlow::OutputMultiDiEdge>() << ">";
      break;
    }
    case 2: {
      oss << "<OpenMultiDiEdge standard_edge="
          << x.get<::FlexFlow::MultiDiEdge>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(
          fmt::format("Unknown index {} for type OpenMultiDiEdge", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         ::FlexFlow::OpenMultiDiEdge const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
