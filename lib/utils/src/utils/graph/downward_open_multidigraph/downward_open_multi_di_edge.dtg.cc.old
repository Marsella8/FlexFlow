// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/downward_open_multidigraph/downward_open_multi_di_edge.variant.toml
/* proj-data
{
  "generated_from": "a48025d66b3bdc8eec931e33694b0a22"
}
*/

#include "utils/graph/downward_open_multidigraph/downward_open_multi_di_edge.dtg.h"

#include <sstream>

namespace FlexFlow {
DownwardOpenMultiDiEdge::DownwardOpenMultiDiEdge(
    ::FlexFlow::OutputMultiDiEdge const &v)
    : raw_variant(v) {}
DownwardOpenMultiDiEdge::DownwardOpenMultiDiEdge(
    ::FlexFlow::MultiDiEdge const &v)
    : raw_variant(v) {}
bool DownwardOpenMultiDiEdge::operator==(
    DownwardOpenMultiDiEdge const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool DownwardOpenMultiDiEdge::operator!=(
    DownwardOpenMultiDiEdge const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool DownwardOpenMultiDiEdge::operator<(
    DownwardOpenMultiDiEdge const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool DownwardOpenMultiDiEdge::operator>(
    DownwardOpenMultiDiEdge const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool DownwardOpenMultiDiEdge::operator<=(
    DownwardOpenMultiDiEdge const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool DownwardOpenMultiDiEdge::operator>=(
    DownwardOpenMultiDiEdge const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::DownwardOpenMultiDiEdge>::operator()(
    ::FlexFlow::DownwardOpenMultiDiEdge const &x) const {
  return std::hash<
      std::variant<::FlexFlow::OutputMultiDiEdge, ::FlexFlow::MultiDiEdge>>{}(
      x.raw_variant);
}
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::DownwardOpenMultiDiEdge const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<DownwardOpenMultiDiEdge output_edge="
          << x.get<::FlexFlow::OutputMultiDiEdge>() << ">";
      break;
    }
    case 1: {
      oss << "<DownwardOpenMultiDiEdge standard_edge="
          << x.get<::FlexFlow::MultiDiEdge>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(fmt::format(
          "Unknown index {} for type DownwardOpenMultiDiEdge", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         ::FlexFlow::DownwardOpenMultiDiEdge const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
