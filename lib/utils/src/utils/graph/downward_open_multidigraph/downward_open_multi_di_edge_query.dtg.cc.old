// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/downward_open_multidigraph/downward_open_multi_di_edge_query.struct.toml
/* proj-data
{
  "generated_from": "396fddca0f20f2459ee9938138d3fc40"
}
*/

#include "utils/graph/downward_open_multidigraph/downward_open_multi_di_edge_query.dtg.h"

#include "utils/graph/multidigraph/multi_di_edge_query.dtg.h"
#include "utils/graph/open_multidigraph/output_multi_di_edge_query.dtg.h"
#include <sstream>

namespace FlexFlow {
DownwardOpenMultiDiEdgeQuery::DownwardOpenMultiDiEdgeQuery(
    ::FlexFlow::OutputMultiDiEdgeQuery const &output_edge_query,
    ::FlexFlow::MultiDiEdgeQuery const &standard_edge_query)
    : output_edge_query(output_edge_query),
      standard_edge_query(standard_edge_query) {}
bool DownwardOpenMultiDiEdgeQuery::operator==(
    DownwardOpenMultiDiEdgeQuery const &other) const {
  return std::tie(this->output_edge_query, this->standard_edge_query) ==
         std::tie(other.output_edge_query, other.standard_edge_query);
}
bool DownwardOpenMultiDiEdgeQuery::operator!=(
    DownwardOpenMultiDiEdgeQuery const &other) const {
  return std::tie(this->output_edge_query, this->standard_edge_query) !=
         std::tie(other.output_edge_query, other.standard_edge_query);
}
bool DownwardOpenMultiDiEdgeQuery::operator<(
    DownwardOpenMultiDiEdgeQuery const &other) const {
  return std::tie(this->output_edge_query, this->standard_edge_query) <
         std::tie(other.output_edge_query, other.standard_edge_query);
}
bool DownwardOpenMultiDiEdgeQuery::operator>(
    DownwardOpenMultiDiEdgeQuery const &other) const {
  return std::tie(this->output_edge_query, this->standard_edge_query) >
         std::tie(other.output_edge_query, other.standard_edge_query);
}
bool DownwardOpenMultiDiEdgeQuery::operator<=(
    DownwardOpenMultiDiEdgeQuery const &other) const {
  return std::tie(this->output_edge_query, this->standard_edge_query) <=
         std::tie(other.output_edge_query, other.standard_edge_query);
}
bool DownwardOpenMultiDiEdgeQuery::operator>=(
    DownwardOpenMultiDiEdgeQuery const &other) const {
  return std::tie(this->output_edge_query, this->standard_edge_query) >=
         std::tie(other.output_edge_query, other.standard_edge_query);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::DownwardOpenMultiDiEdgeQuery>::operator()(
    ::FlexFlow::DownwardOpenMultiDiEdgeQuery const &x) const {
  size_t result = 0;
  result ^=
      std::hash<::FlexFlow::OutputMultiDiEdgeQuery>{}(x.output_edge_query) +
      0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<::FlexFlow::MultiDiEdgeQuery>{}(x.standard_edge_query) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(DownwardOpenMultiDiEdgeQuery const &x) {
  std::ostringstream oss;
  oss << "<DownwardOpenMultiDiEdgeQuery";
  oss << " output_edge_query=" << x.output_edge_query;
  oss << " standard_edge_query=" << x.standard_edge_query;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         DownwardOpenMultiDiEdgeQuery const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
