// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/node/node_query.struct.toml
/* proj-data
{
  "generated_from": "e3e4a13f0d1a7ca9f179ba09dd4c5735"
}
*/

#include "utils/graph/node/node_query.dtg.h"

#include <sstream>

namespace FlexFlow {
NodeQuery::NodeQuery(::FlexFlow::query_set<::FlexFlow::Node> const &nodes)
    : nodes(nodes) {}
bool NodeQuery::operator==(NodeQuery const &other) const {
  return std::tie(this->nodes) == std::tie(other.nodes);
}
bool NodeQuery::operator!=(NodeQuery const &other) const {
  return std::tie(this->nodes) != std::tie(other.nodes);
}
bool NodeQuery::operator<(NodeQuery const &other) const {
  return std::tie(this->nodes) < std::tie(other.nodes);
}
bool NodeQuery::operator>(NodeQuery const &other) const {
  return std::tie(this->nodes) > std::tie(other.nodes);
}
bool NodeQuery::operator<=(NodeQuery const &other) const {
  return std::tie(this->nodes) <= std::tie(other.nodes);
}
bool NodeQuery::operator>=(NodeQuery const &other) const {
  return std::tie(this->nodes) >= std::tie(other.nodes);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::NodeQuery>::operator()(
    ::FlexFlow::NodeQuery const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::query_set<::FlexFlow::Node>>{}(x.nodes) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(NodeQuery const &x) {
  std::ostringstream oss;
  oss << "<NodeQuery";
  oss << " nodes=" << x.nodes;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, NodeQuery const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
