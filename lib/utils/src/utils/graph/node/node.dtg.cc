// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/node/node.struct.toml
/* proj-data
{
  "generated_from": "cc4828f6a9dcc4c3435767bd6ccfc866"
}
*/

#include "utils/graph/node/node.dtg.h"

#include <sstream>

namespace FlexFlow {
Node::Node(size_t const &raw_uid) : raw_uid(raw_uid) {}
bool Node::operator==(Node const &other) const {
  return std::tie(this->raw_uid) == std::tie(other.raw_uid);
}
bool Node::operator!=(Node const &other) const {
  return std::tie(this->raw_uid) != std::tie(other.raw_uid);
}
bool Node::operator<(Node const &other) const {
  return std::tie(this->raw_uid) < std::tie(other.raw_uid);
}
bool Node::operator>(Node const &other) const {
  return std::tie(this->raw_uid) > std::tie(other.raw_uid);
}
bool Node::operator<=(Node const &other) const {
  return std::tie(this->raw_uid) <= std::tie(other.raw_uid);
}
bool Node::operator>=(Node const &other) const {
  return std::tie(this->raw_uid) >= std::tie(other.raw_uid);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::Node>::operator()(::FlexFlow::Node const &x) const {
  size_t result = 0;
  result ^= std::hash<size_t>{}(x.raw_uid) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(Node const &x) {
  std::ostringstream oss;
  oss << "<Node";
  oss << " raw_uid=" << x.raw_uid;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, Node const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
