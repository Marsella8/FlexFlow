// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/multidigraph/multi_di_edge.struct.toml
/* proj-data
{
  "generated_from": "73b001bfb7a0b75c42cd5037bb8dc686"
}
*/

#include "utils/graph/multidigraph/multi_di_edge.dtg.h"

#include "utils/graph/node/node.dtg.h"
#include <sstream>

namespace FlexFlow {
MultiDiEdge::MultiDiEdge(::FlexFlow::Node const &src,
                         ::FlexFlow::Node const &dst,
                         std::pair<int, int> const &raw_edge_uid)
    : src(src), dst(dst), raw_edge_uid(raw_edge_uid) {}
bool MultiDiEdge::operator==(MultiDiEdge const &other) const {
  return std::tie(this->src, this->dst, this->raw_edge_uid) ==
         std::tie(other.src, other.dst, other.raw_edge_uid);
}
bool MultiDiEdge::operator!=(MultiDiEdge const &other) const {
  return std::tie(this->src, this->dst, this->raw_edge_uid) !=
         std::tie(other.src, other.dst, other.raw_edge_uid);
}
bool MultiDiEdge::operator<(MultiDiEdge const &other) const {
  return std::tie(this->src, this->dst, this->raw_edge_uid) <
         std::tie(other.src, other.dst, other.raw_edge_uid);
}
bool MultiDiEdge::operator>(MultiDiEdge const &other) const {
  return std::tie(this->src, this->dst, this->raw_edge_uid) >
         std::tie(other.src, other.dst, other.raw_edge_uid);
}
bool MultiDiEdge::operator<=(MultiDiEdge const &other) const {
  return std::tie(this->src, this->dst, this->raw_edge_uid) <=
         std::tie(other.src, other.dst, other.raw_edge_uid);
}
bool MultiDiEdge::operator>=(MultiDiEdge const &other) const {
  return std::tie(this->src, this->dst, this->raw_edge_uid) >=
         std::tie(other.src, other.dst, other.raw_edge_uid);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::MultiDiEdge>::operator()(
    ::FlexFlow::MultiDiEdge const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::Node>{}(x.src) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<::FlexFlow::Node>{}(x.dst) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<std::pair<int, int>>{}(x.raw_edge_uid) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(MultiDiEdge const &x) {
  std::ostringstream oss;
  oss << "<MultiDiEdge";
  oss << " src=" << x.src;
  oss << " dst=" << x.dst;
  oss << " raw_edge_uid=" << x.raw_edge_uid;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, MultiDiEdge const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
