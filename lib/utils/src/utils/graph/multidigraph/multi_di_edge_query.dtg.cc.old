// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/multidigraph/multi_di_edge_query.struct.toml
/* proj-data
{
  "generated_from": "56edb1e799c2bdf7435479ce8a483311"
}
*/

#include "utils/graph/multidigraph/multi_di_edge_query.dtg.h"

#include "utils/graph/multidigraph/multi_di_edge.dtg.h"
#include "utils/graph/node/node.dtg.h"
#include "utils/graph/query_set.h"
#include <sstream>

namespace FlexFlow {
MultiDiEdgeQuery::MultiDiEdgeQuery(
    ::FlexFlow::query_set<::FlexFlow::Node> const &srcs,
    ::FlexFlow::query_set<::FlexFlow::Node> const &dsts,
    ::FlexFlow::query_set<::FlexFlow::Edge> const &uids)
    : srcs(srcs), dsts(dsts), uids(uids) {}
bool MultiDiEdgeQuery::operator==(MultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs, this->dsts, this->uids) ==
         std::tie(other.srcs, other.dsts, other.uids);
}
bool MultiDiEdgeQuery::operator!=(MultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs, this->dsts, this->uids) !=
         std::tie(other.srcs, other.dsts, other.uids);
}
bool MultiDiEdgeQuery::operator<(MultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs, this->dsts, this->uids) <
         std::tie(other.srcs, other.dsts, other.uids);
}
bool MultiDiEdgeQuery::operator>(MultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs, this->dsts, this->uids) >
         std::tie(other.srcs, other.dsts, other.uids);
}
bool MultiDiEdgeQuery::operator<=(MultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs, this->dsts, this->uids) <=
         std::tie(other.srcs, other.dsts, other.uids);
}
bool MultiDiEdgeQuery::operator>=(MultiDiEdgeQuery const &other) const {
  return std::tie(this->srcs, this->dsts, this->uids) >=
         std::tie(other.srcs, other.dsts, other.uids);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::MultiDiEdgeQuery>::operator()(
    ::FlexFlow::MultiDiEdgeQuery const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::query_set<::FlexFlow::Node>>{}(x.srcs) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<::FlexFlow::query_set<::FlexFlow::Node>>{}(x.dsts) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<::FlexFlow::query_set<::FlexFlow::Edge>>{}(x.uids) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(MultiDiEdgeQuery const &x) {
  std::ostringstream oss;
  oss << "<MultiDiEdgeQuery";
  oss << " srcs=" << x.srcs;
  oss << " dsts=" << x.dsts;
  oss << " uids=" << x.uids;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, MultiDiEdgeQuery const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
