// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/open_dataflow_graph/open_dataflow_value.variant.toml
/* proj-data
{
  "generated_from": "a212e5a39ee0d8c9ef39bc4892e15416"
}
*/

#include "utils/graph/open_dataflow_graph/open_dataflow_value.dtg.h"

#include <sstream>

namespace FlexFlow {
OpenDataflowValue::OpenDataflowValue(::FlexFlow::DataflowOutput const &v)
    : raw_variant(v) {}
OpenDataflowValue::OpenDataflowValue(::FlexFlow::DataflowGraphInput const &v)
    : raw_variant(v) {}
bool OpenDataflowValue::operator==(OpenDataflowValue const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool OpenDataflowValue::operator!=(OpenDataflowValue const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool OpenDataflowValue::operator<(OpenDataflowValue const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool OpenDataflowValue::operator>(OpenDataflowValue const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool OpenDataflowValue::operator<=(OpenDataflowValue const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool OpenDataflowValue::operator>=(OpenDataflowValue const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::OpenDataflowValue>::operator()(
    ::FlexFlow::OpenDataflowValue const &x) const {
  return std::hash<std::variant<::FlexFlow::DataflowOutput,
                                ::FlexFlow::DataflowGraphInput>>{}(
      x.raw_variant);
}
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::OpenDataflowValue const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<OpenDataflowValue ::FlexFlow::DataflowOutput="
          << x.get<::FlexFlow::DataflowOutput>() << ">";
      break;
    }
    case 1: {
      oss << "<OpenDataflowValue ::FlexFlow::DataflowGraphInput="
          << x.get<::FlexFlow::DataflowGraphInput>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(fmt::format(
          "Unknown index {} for type OpenDataflowValue", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         ::FlexFlow::OpenDataflowValue const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
