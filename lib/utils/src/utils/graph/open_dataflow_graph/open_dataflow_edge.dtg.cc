// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/utils/include/utils/graph/open_dataflow_graph/open_dataflow_edge.variant.toml
/* proj-data
{
  "generated_from": "33e3c8ad4602c3e20c29b6c0dfa104ca"
}
*/

#include "utils/graph/open_dataflow_graph/open_dataflow_edge.dtg.h"

#include <sstream>

namespace FlexFlow {
OpenDataflowEdge::OpenDataflowEdge(::FlexFlow::DataflowInputEdge const &v)
    : raw_variant(v) {}
OpenDataflowEdge::OpenDataflowEdge(::FlexFlow::DataflowEdge const &v)
    : raw_variant(v) {}
bool OpenDataflowEdge::operator==(OpenDataflowEdge const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool OpenDataflowEdge::operator!=(OpenDataflowEdge const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool OpenDataflowEdge::operator<(OpenDataflowEdge const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool OpenDataflowEdge::operator>(OpenDataflowEdge const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool OpenDataflowEdge::operator<=(OpenDataflowEdge const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool OpenDataflowEdge::operator>=(OpenDataflowEdge const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::OpenDataflowEdge>::operator()(
    ::FlexFlow::OpenDataflowEdge const &x) const {
  return std::hash<
      std::variant<::FlexFlow::DataflowInputEdge, ::FlexFlow::DataflowEdge>>{}(
      x.raw_variant);
}
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::OpenDataflowEdge const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<OpenDataflowEdge ::FlexFlow::DataflowInputEdge="
          << x.get<::FlexFlow::DataflowInputEdge>() << ">";
      break;
    }
    case 1: {
      oss << "<OpenDataflowEdge ::FlexFlow::DataflowEdge="
          << x.get<::FlexFlow::DataflowEdge>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(
          fmt::format("Unknown index {} for type OpenDataflowEdge", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         ::FlexFlow::OpenDataflowEdge const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
