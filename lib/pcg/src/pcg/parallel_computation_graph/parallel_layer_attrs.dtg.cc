// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/parallel_computation_graph/parallel_layer_attrs.struct.toml
/* proj-data
{
  "generated_from": "9bb6e3cb7b0e523fae8f33bd8ad80d6d"
}
*/

#include "pcg/parallel_computation_graph/parallel_layer_attrs.dtg.h"

#include "op-attrs/operator_attrs.h"
#include "utils/stack_string.h"
#include <optional>
#include <sstream>

namespace FlexFlow {
ParallelLayerAttrs::ParallelLayerAttrs(
    ::FlexFlow::PCGOperatorAttrs const &op_attrs,
    std::optional<::FlexFlow::stack_string<MAX_OPNAME>> const &name)
    : op_attrs(op_attrs), name(name) {}
bool ParallelLayerAttrs::operator==(ParallelLayerAttrs const &other) const {
  return std::tie(this->op_attrs, this->name) ==
         std::tie(other.op_attrs, other.name);
}
bool ParallelLayerAttrs::operator!=(ParallelLayerAttrs const &other) const {
  return std::tie(this->op_attrs, this->name) !=
         std::tie(other.op_attrs, other.name);
}
bool ParallelLayerAttrs::operator<(ParallelLayerAttrs const &other) const {
  return std::tie(this->op_attrs, this->name) <
         std::tie(other.op_attrs, other.name);
}
bool ParallelLayerAttrs::operator>(ParallelLayerAttrs const &other) const {
  return std::tie(this->op_attrs, this->name) >
         std::tie(other.op_attrs, other.name);
}
bool ParallelLayerAttrs::operator<=(ParallelLayerAttrs const &other) const {
  return std::tie(this->op_attrs, this->name) <=
         std::tie(other.op_attrs, other.name);
}
bool ParallelLayerAttrs::operator>=(ParallelLayerAttrs const &other) const {
  return std::tie(this->op_attrs, this->name) >=
         std::tie(other.op_attrs, other.name);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::ParallelLayerAttrs>::operator()(
    ::FlexFlow::ParallelLayerAttrs const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::PCGOperatorAttrs>{}(x.op_attrs) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^=
      std::hash<std::optional<::FlexFlow::stack_string<MAX_OPNAME>>>{}(x.name) +
      0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::ParallelLayerAttrs
    adl_serializer<::FlexFlow::ParallelLayerAttrs>::from_json(json const &j) {
  return ::FlexFlow::ParallelLayerAttrs{
      j.at("op_attrs").template get<::FlexFlow::PCGOperatorAttrs>(),
      j.at("name")
          .template get<std::optional<::FlexFlow::stack_string<MAX_OPNAME>>>()};
}
void adl_serializer<::FlexFlow::ParallelLayerAttrs>::to_json(
    json &j, ::FlexFlow::ParallelLayerAttrs const &v) {
  j["__type"] = "ParallelLayerAttrs";
  j["op_attrs"] = v.op_attrs;
  j["name"] = v.name;
}
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(ParallelLayerAttrs const &x) {
  std::ostringstream oss;
  oss << "<ParallelLayerAttrs";
  oss << " op_attrs=" << x.op_attrs;
  oss << " name=" << x.name;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, ParallelLayerAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
