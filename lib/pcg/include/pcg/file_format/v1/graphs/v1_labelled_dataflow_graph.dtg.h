// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/file_format/v1/graphs/v1_labelled_dataflow_graph.struct.toml
/* proj-data
{
  "generated_from": "89120d1975d2e727327594b4ab8a4952"
}
*/

#ifndef _FLEXFLOW_LIB_PCG_INCLUDE_PCG_FILE_FORMAT_V1_GRAPHS_V1_LABELLED_DATAFLOW_GRAPH_DTG_H
#define _FLEXFLOW_LIB_PCG_INCLUDE_PCG_FILE_FORMAT_V1_GRAPHS_V1_LABELLED_DATAFLOW_GRAPH_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "pcg/file_format/v1/graphs/v1_dataflow_graph.dtg.h"
#include "pcg/file_format/v1/graphs/v1_graph_output.dtg.h"
#include <ostream>
#include <sstream>
#include <unordered_map>

namespace FlexFlow {
template <typename NodeLabel, typename OutputLabel>
struct V1LabelledDataflowGraph {
  V1LabelledDataflowGraph() = delete;
  explicit V1LabelledDataflowGraph(
      std::unordered_map<size_t, NodeLabel> const &node_labels,
      std::unordered_map<size_t, std::vector<OutputLabel>> const &output_labels,
      ::FlexFlow::V1DataflowGraph const &graph);

  std::unordered_map<size_t, NodeLabel> node_labels;
  std::unordered_map<size_t, std::vector<OutputLabel>> output_labels;
  ::FlexFlow::V1DataflowGraph graph;
};
} // namespace FlexFlow

namespace nlohmann {
template <typename NodeLabel, typename OutputLabel>
struct adl_serializer<
    ::FlexFlow::V1LabelledDataflowGraph<NodeLabel, OutputLabel>> {
  static ::FlexFlow::V1LabelledDataflowGraph<NodeLabel, OutputLabel>
      from_json(json const &);
  static void to_json(
      json &,
      ::FlexFlow::V1LabelledDataflowGraph<NodeLabel, OutputLabel> const &);
};
} // namespace nlohmann

namespace FlexFlow {
template <typename NodeLabel, typename OutputLabel>
std::string format_as(V1LabelledDataflowGraph<NodeLabel, OutputLabel> const &);
template <typename NodeLabel, typename OutputLabel>
std::ostream &
    operator<<(std::ostream &,
               V1LabelledDataflowGraph<NodeLabel, OutputLabel> const &);
} // namespace FlexFlow

namespace FlexFlow {
template <typename NodeLabel, typename OutputLabel>
V1LabelledDataflowGraph<NodeLabel, OutputLabel>::V1LabelledDataflowGraph(
    std::unordered_map<size_t, NodeLabel> const &node_labels,
    std::unordered_map<size_t, std::vector<OutputLabel>> const &output_labels,
    ::FlexFlow::V1DataflowGraph const &graph)
    : node_labels(node_labels), output_labels(output_labels), graph(graph) {}
} // namespace FlexFlow

namespace nlohmann {
template <typename NodeLabel, typename OutputLabel>
::FlexFlow::V1LabelledDataflowGraph<NodeLabel, OutputLabel> adl_serializer<
    ::FlexFlow::V1LabelledDataflowGraph<NodeLabel, OutputLabel>>::
    from_json(json const &j) {
  return ::FlexFlow::V1LabelledDataflowGraph<NodeLabel, OutputLabel>{
      j.at("node_labels").template get<std::unordered_map<size_t, NodeLabel>>(),
      j.at("output_labels")
          .template get<std::unordered_map<size_t, std::vector<OutputLabel>>>(),
      j.at("graph").template get<::FlexFlow::V1DataflowGraph>()};
}
template <typename NodeLabel, typename OutputLabel>
void adl_serializer<
    ::FlexFlow::V1LabelledDataflowGraph<NodeLabel, OutputLabel>>::
    to_json(
        json &j,
        ::FlexFlow::V1LabelledDataflowGraph<NodeLabel, OutputLabel> const &v) {
  j["__type"] = "V1LabelledDataflowGraph";
  j["node_labels"] = v.node_labels;
  j["output_labels"] = v.output_labels;
  j["graph"] = v.graph;
}
} // namespace nlohmann

namespace FlexFlow {
template <typename NodeLabel, typename OutputLabel>
std::string
    format_as(V1LabelledDataflowGraph<NodeLabel, OutputLabel> const &x) {
  std::ostringstream oss;
  oss << "<V1LabelledDataflowGraph";
  oss << " node_labels=" << x.node_labels;
  oss << " output_labels=" << x.output_labels;
  oss << " graph=" << x.graph;
  oss << ">";
  return oss.str();
}
template <typename NodeLabel, typename OutputLabel>
std::ostream &
    operator<<(std::ostream &s,
               V1LabelledDataflowGraph<NodeLabel, OutputLabel> const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_PCG_INCLUDE_PCG_FILE_FORMAT_V1_GRAPHS_V1_LABELLED_DATAFLOW_GRAPH_DTG_H
