// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/parallel_dim.struct.toml
/* proj-data
{
  "generated_from": "186bedde7826c7a3d00343ed63ab9971"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_DIM_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_DIM_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct ParallelDim {
  ParallelDim() = delete;
  ParallelDim(size_t const &size,
              int const &degree,
              bool const &is_replica_dim);

  bool operator==(ParallelDim const &) const;
  bool operator!=(ParallelDim const &) const;
  bool operator<(ParallelDim const &) const;
  bool operator>(ParallelDim const &) const;
  bool operator<=(ParallelDim const &) const;
  bool operator>=(ParallelDim const &) const;
  size_t size;
  int degree;
  bool is_replica_dim;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::ParallelDim> {
  size_t operator()(FlexFlow::ParallelDim const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::ParallelDim> {
  static FlexFlow::ParallelDim from_json(json const &);
  static void to_json(json &, FlexFlow::ParallelDim const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<FlexFlow::ParallelDim> {
  static Gen<FlexFlow::ParallelDim> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(ParallelDim const &);
std::ostream &operator<<(std::ostream &, ParallelDim const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_DIM_DTG_H
