// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/parallel_tensor_dims.struct.toml
/* proj-data
{
  "generated_from": "b46ffa08758bdcc57a75183255248ca6"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_TENSOR_DIMS_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_TENSOR_DIMS_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "op-attrs/dim_ordered.h"
#include "op-attrs/parallel_dim.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct ParallelTensorDims {
  ParallelTensorDims() = delete;
  ParallelTensorDims(
      ::FlexFlow::FFOrdered<::FlexFlow::ParallelDim> const &ff_ordered);

  bool operator==(ParallelTensorDims const &) const;
  bool operator!=(ParallelTensorDims const &) const;
  bool operator<(ParallelTensorDims const &) const;
  bool operator>(ParallelTensorDims const &) const;
  bool operator<=(ParallelTensorDims const &) const;
  bool operator>=(ParallelTensorDims const &) const;
  ::FlexFlow::FFOrdered<::FlexFlow::ParallelDim> ff_ordered;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::ParallelTensorDims> {
  size_t operator()(FlexFlow::ParallelTensorDims const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::ParallelTensorDims> {
  static FlexFlow::ParallelTensorDims from_json(json const &);
  static void to_json(json &, FlexFlow::ParallelTensorDims const &);
};
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(ParallelTensorDims const &);
std::ostream &operator<<(std::ostream &, ParallelTensorDims const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_TENSOR_DIMS_DTG_H
