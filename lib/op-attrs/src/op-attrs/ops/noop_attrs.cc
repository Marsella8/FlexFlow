// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/noop_attrs.struct.toml

#include "op-attrs/ops/noop_attrs.h"

namespace FlexFlow {
bool NoopAttrs::operator==(NoopAttrs const &other) const {
  return std::tie() == std::tie();
}
bool NoopAttrs::operator!=(NoopAttrs const &other) const {
  return std::tie() != std::tie();
}
bool NoopAttrs::operator<(NoopAttrs const &other) const {
  return std::tie() < std::tie();
}
bool NoopAttrs::operator>(NoopAttrs const &other) const {
  return std::tie() > std::tie();
}
bool NoopAttrs::operator<=(NoopAttrs const &other) const {
  return std::tie() <= std::tie();
}
bool NoopAttrs::operator>=(NoopAttrs const &other) const {
  return std::tie() >= std::tie();
}
} // namespace FlexFlow

namespace std {
size_t
    hash<FlexFlow::NoopAttrs>::operator()(FlexFlow::NoopAttrs const &x) const {
  size_t result = 0;
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::NoopAttrs
    adl_serializer<FlexFlow::NoopAttrs>::from_json(json const &j) {
  return {};
}
void adl_serializer<FlexFlow::NoopAttrs>::to_json(
    json &j, FlexFlow::NoopAttrs const &v) {
  j["__type"] = "NoopAttrs";
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::NoopAttrs> Arbitrary<FlexFlow::NoopAttrs>::arbitrary() {
  return gen::construct<FlexFlow::NoopAttrs>();
}
} // namespace rc

namespace FlexFlow {
std::string format_as(NoopAttrs const &x) {
  std::ostringstream oss;
  oss << "<NoopAttrs";
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, NoopAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
