// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/unlabelled/pattern_value.struct.toml
/* proj-data
{
  "generated_from": "60f3d7ccfb3b61349ff2cf61a0bfd1c0"
}
*/

#ifndef _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_UNLABELLED_PATTERN_VALUE_DTG_H
#define _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_UNLABELLED_PATTERN_VALUE_DTG_H

#include "fmt/format.h"
#include "utils/graph/open_dataflow_graph/open_dataflow_value.dtg.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct PatternValue {
  PatternValue() = delete;
  explicit PatternValue(
      ::FlexFlow::OpenDataflowValue const &raw_dataflow_value);

  bool operator==(PatternValue const &) const;
  bool operator!=(PatternValue const &) const;
  bool operator<(PatternValue const &) const;
  bool operator>(PatternValue const &) const;
  bool operator<=(PatternValue const &) const;
  bool operator>=(PatternValue const &) const;
  ::FlexFlow::OpenDataflowValue raw_dataflow_value;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::PatternValue> {
  size_t operator()(::FlexFlow::PatternValue const &) const;
};
} // namespace std

namespace FlexFlow {
std::string format_as(PatternValue const &);
std::ostream &operator<<(std::ostream &, PatternValue const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_UNLABELLED_PATTERN_VALUE_DTG_H
