// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/unlabelled/pattern_value_use.struct.toml
/* proj-data
{
  "generated_from": "7a2a514e11987e06022337d234fb32c8"
}
*/

#ifndef _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_UNLABELLED_PATTERN_VALUE_USE_DTG_H
#define _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_UNLABELLED_PATTERN_VALUE_USE_DTG_H

#include "fmt/format.h"
#include "utils/graph/dataflow_graph/dataflow_input.dtg.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct PatternValueUse {
  PatternValueUse() = delete;
  explicit PatternValueUse(::FlexFlow::DataflowInput const &raw_dataflow_input);

  bool operator==(PatternValueUse const &) const;
  bool operator!=(PatternValueUse const &) const;
  bool operator<(PatternValueUse const &) const;
  bool operator>(PatternValueUse const &) const;
  bool operator<=(PatternValueUse const &) const;
  bool operator>=(PatternValueUse const &) const;
  ::FlexFlow::DataflowInput raw_dataflow_input;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::PatternValueUse> {
  size_t operator()(::FlexFlow::PatternValueUse const &) const;
};
} // namespace std

namespace FlexFlow {
std::string format_as(PatternValueUse const &);
std::ostream &operator<<(std::ostream &, PatternValueUse const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_UNLABELLED_PATTERN_VALUE_USE_DTG_H
