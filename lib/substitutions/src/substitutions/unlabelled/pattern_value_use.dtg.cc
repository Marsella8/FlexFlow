// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/unlabelled/pattern_value_use.struct.toml
/* proj-data
{
  "generated_from": "7a2a514e11987e06022337d234fb32c8"
}
*/

#include "substitutions/unlabelled/pattern_value_use.dtg.h"

#include <sstream>

namespace FlexFlow {
PatternValueUse::PatternValueUse(
    ::FlexFlow::DataflowInput const &raw_dataflow_input)
    : raw_dataflow_input(raw_dataflow_input) {}
bool PatternValueUse::operator==(PatternValueUse const &other) const {
  return std::tie(this->raw_dataflow_input) ==
         std::tie(other.raw_dataflow_input);
}
bool PatternValueUse::operator!=(PatternValueUse const &other) const {
  return std::tie(this->raw_dataflow_input) !=
         std::tie(other.raw_dataflow_input);
}
bool PatternValueUse::operator<(PatternValueUse const &other) const {
  return std::tie(this->raw_dataflow_input) <
         std::tie(other.raw_dataflow_input);
}
bool PatternValueUse::operator>(PatternValueUse const &other) const {
  return std::tie(this->raw_dataflow_input) >
         std::tie(other.raw_dataflow_input);
}
bool PatternValueUse::operator<=(PatternValueUse const &other) const {
  return std::tie(this->raw_dataflow_input) <=
         std::tie(other.raw_dataflow_input);
}
bool PatternValueUse::operator>=(PatternValueUse const &other) const {
  return std::tie(this->raw_dataflow_input) >=
         std::tie(other.raw_dataflow_input);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::PatternValueUse>::operator()(
    ::FlexFlow::PatternValueUse const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::DataflowInput>{}(x.raw_dataflow_input) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(PatternValueUse const &x) {
  std::ostringstream oss;
  oss << "<PatternValueUse";
  oss << " raw_dataflow_input=" << x.raw_dataflow_input;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, PatternValueUse const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
