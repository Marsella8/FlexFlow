// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/unlabelled/pattern_value.struct.toml
/* proj-data
{
  "generated_from": "60f3d7ccfb3b61349ff2cf61a0bfd1c0"
}
*/

#include "substitutions/unlabelled/pattern_value.dtg.h"

#include <sstream>

namespace FlexFlow {
PatternValue::PatternValue(
    ::FlexFlow::OpenDataflowValue const &raw_dataflow_value)
    : raw_dataflow_value(raw_dataflow_value) {}
bool PatternValue::operator==(PatternValue const &other) const {
  return std::tie(this->raw_dataflow_value) ==
         std::tie(other.raw_dataflow_value);
}
bool PatternValue::operator!=(PatternValue const &other) const {
  return std::tie(this->raw_dataflow_value) !=
         std::tie(other.raw_dataflow_value);
}
bool PatternValue::operator<(PatternValue const &other) const {
  return std::tie(this->raw_dataflow_value) <
         std::tie(other.raw_dataflow_value);
}
bool PatternValue::operator>(PatternValue const &other) const {
  return std::tie(this->raw_dataflow_value) >
         std::tie(other.raw_dataflow_value);
}
bool PatternValue::operator<=(PatternValue const &other) const {
  return std::tie(this->raw_dataflow_value) <=
         std::tie(other.raw_dataflow_value);
}
bool PatternValue::operator>=(PatternValue const &other) const {
  return std::tie(this->raw_dataflow_value) >=
         std::tie(other.raw_dataflow_value);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::PatternValue>::operator()(
    ::FlexFlow::PatternValue const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::OpenDataflowValue>{}(x.raw_dataflow_value) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(PatternValue const &x) {
  std::ostringstream oss;
  oss << "<PatternValue";
  oss << " raw_dataflow_value=" << x.raw_dataflow_value;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, PatternValue const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
